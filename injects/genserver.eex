defmodule <%= @module_alias %> do
  use GenServer
  <%= if @via do %>
  defp via_tuple(args) do
    # TODO: Change name resolution here!
    {:via, Registry, {<%= @module_alias %>.Registry, args}}
  end
    <% sl_opts = ", name: via_tuple(args)" %>
  def start_link(args) do
    GenServer.start_link(__MODULE__, args<%= sl_opts %>)
  end
  <% else %><% sl_opts = "" %>
  def start_link(args) do
    GenServer.start_link(__MODULE__, args<%= sl_opts %>)
  end
  <% end %>
  ### API
  <%= if not @tick do %><%= if @via do %>
  def get(name) do
    GenServer.call(via_tuple(name), :get)
  end

  def set(name, data) do
    GenServer.cast(via_tuple(name), {:set, data})
  end<% else %>
  def get(pid) do
    GenServer.call(pid, :get)
  end

  def set(pid, data) do
    GenServer.cast(pid, {:set, data})
  end<% end %>
  <% else %>
  #TODO: GenServer API's goes here
  <% end %>
  ### Callbacks
  <%= if @tick do %>
  @impl GenServer
  def init(state) do
    schedule_work()
    {:ok, state}
  end

  defp schedule_work() do
    Process.send_after(self(), :work, 1_000)
  end

  def handle_info(:work, state) do
    #TODO: Do some usefull job here
    schedule_work()
    {:noreply, state}
  end<% else %>
  @impl GenServer
  def handle_call(:get, _from, state) do
    # TODO: Do some usefull job here
    {:return, state, state}
  end

  @impl GenServer
  def handle_cast({:set, data}, state) do
    # TODO: Do some usefull job here
    {:no_return, state.data}
  end<% end %>
end
